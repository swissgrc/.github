on:
  workflow_call:
    inputs:
      image-name:
        required: true
        type: string
      default-latest-tag:
        type: boolean
        default: true
      additional-latest-tag-name:
        type: string
        default: ''
      default-unstable-tag:
        type: boolean
        default: true
      additional-unstable-tag-name:
        type: string
        default: ''
      release-tag-suffix:
        type: string
        default: ''
    secrets:
      gh-token:
        required: true
      docker-username:
        required: true
      docker-password:
        required: true

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      # Creates an expression to be used in docker/metadata-action
      - name: Expressions for additional tags
        id: additional-tags
        run: |
          latestTagName="${{ inputs.additional-latest-tag-name }}"
          if [[ -n ${latestTagName} ]]; then
            latestExpression="type=raw,value=${latestTagName},enable=${{ github.event_name == 'release' }}"
          else
            latestExpression=""
          fi
          unstableTagName="${{ inputs.additional-unstable-tag-name }}"
          if [[ -n ${unstableTagName} ]]; then
            unstableExpression="type=raw,value=${unstableTagName},enable=${{ github.ref == format('refs/heads/{0}', 'develop') }}"
          else
            unstableExpression=""
          fi
          echo "latest-expression=${latestExpression}" >> $GITHUB_OUTPUT
          echo "unstable-expression=${unstableExpression}" >> $GITHUB_OUTPUT

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: |
            ${{ inputs.image-name }}
            ghcr.io/${{ inputs.image-name }}
          flavor: |
            latest=${{ inputs.default-latest-tag == true && 'auto' || 'false' }}
          tags: |
            type=ref,event=tag,suffix=${{ inputs.release-tag-suffix != '' && '-' || '' }}${{ inputs.release-tag-suffix }}
            type=ref,event=pr
            # set additional tags if available
            ${{ steps.additional-tags.outputs.latest-expression }}
            ${{ steps.additional-tags.outputs.unstable-expression }}
            # set default unstable tag for develop branch
            type=raw,value=unstable,enable=${{ inputs.default-unstable-tag == true && github.ref == format('refs/heads/{0}', 'develop') }}

      # Build Docker image with Buildx
      - name: Build Docker image
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # As we use multiple registries, we need to extract the first tag from the meta output
      - name: Extract trivy image-ref
        id: extract
        run: |
          firstTag=$(jq --raw-output '.tags[0]' <<< '${{ steps.meta.outputs.json }}')
          echo "Found $firstTag as first tag"
          echo "imageRef=$firstTag" >> $GITHUB_OUTPUT

      # Scan Docker image (not for release builds since we will have multiple tags)
      - name: Scan Docker image
        if: github.event_name != 'release'
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # 0.24.0
        with:
          image-ref: ${{ steps.extract.outputs.imageRef }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      # Publish scan report to GitHub
      - name: Publish scan report to GitHub
        if: ${{ github.event_name != 'release' && always() }}
        uses: github/codeql-action/upload-sarif@429e1977040da7a23b6822b13c129cd1ba93dbb2 # v3.26.2
        with:
          sarif_file: trivy-results.sarif

      # Create Software Bill of Materials (SBOM) (not for release builds since we will have multiple tags)
      - name: Create Software Bill of Materials (SBOM)
        if: github.event_name == 'push'
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # 0.24.0
        with:
          image-ref: ${{ steps.extract.outputs.imageRef }}
          format: 'github'
          output: 'dependency-results.sbom.json'
          github-pat: ${{ secrets.gh-token }}

      # Login to Docker registry if not PR build
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}

      # Login to GitHub Container Registry if not PR build
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.gh-token }}

      # Publish Docker image for CI builds if not PR build
      - name: Push container image
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        if: github.event_name != 'pull_request'
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Update Readme on Docker Hub
      - name: Publish README to Docker Hub
        if: github.event_name != 'pull_request'
        uses: peter-evans/dockerhub-description@e98e4d1628a5f3be2be7c231e50981aee98723ae # v4.0.0
        with:
          username: ${{ secrets.docker-username }}
          password: ${{ secrets.docker-password }}
          repository: ${{ inputs.image-name }}